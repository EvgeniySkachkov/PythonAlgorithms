"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


users = {
    "user_1" : ['pass_1', 0],
    "user_2" : ['pass_2', 1],
    "user_3" : ['pass_3', 1],
    "user_4" : ['pass_4', 0],
    "user_5" : ['pass_5', 1],
    "user_6" : ['pass_6', 1],
    "user_7" : ['pass_7', 1],
    "user_8" : ['pass_8', 0],
    "user_9" : ['pass_9', 1],
    "user_10" : ['pass_10', 0]
}

# Метод №1
# Сложность O(1)

def authenticator_1(name, password):
    if users.get(name, -1) == -1 or users.get(name)[0] != password: # O(1)
        print('Введён неверный логин или пароль!') # O(1)
    elif users.get(name)[1] == 0: # O(1)
        print('Учётная запись не активирована. Пройдите процедуру активации!') # O(1)
    else: # O(1)
        print('Процедура аутентификации выполнена успешно!') # O(1)

authenticator_1('user_4', 'pass_4')
authenticator_1('user_5', 'pass_3')
authenticator_1('user', 'pass')
authenticator_1('user_2', 'pass_2')

# Метод №2
# Сложность O(n)

def authenticator_2(name, password):
    for key, val in users.items(): # O(n)
        if key == name: # O(1)
            if password == val[0]: # O(1)
                if val[1] == 1: # O(1)
                    return('Процедура аутентификации выполнена успешно!') # O(1)
                else:
                    return('Учётная запись не активирована. Пройдите процедуру активации!') # O(1)
            else:
                return('Введён неверный пароль!') # O(1)
    return('Введён неверный логин!') # O(1)

print(authenticator_2('user_4', 'pass_4'))
print(authenticator_2('user_5', 'pass_3'))
print(authenticator_2('user', 'pass'))
print(authenticator_2('user_2', 'pass_2'))

# Считаю первый метод боллее эффективным, так как его сложность меньше второго.
# Так же он визуально проще читается, что позоляет легче понять и отредактироваь его, в случае необходимости.



























